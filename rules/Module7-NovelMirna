rule SortedBamToMpileup:
    """
    Get Mpileup for Reference Genome.
    """
    input:
        bam="%s/BAM/STAR/Reference/{samples}_reference_star.bam" % (config["project-folder"]),
        reference="%s" % (config["reference"])
    output:
        mpileup="%s/MPILEUP/mpileup_reference/{samples}.mpileup" % (config["project-folder"]),
        unique="%s/MPILEUP/mpileup_reference/{samples}.mpileup.unique" % (config["project-folder"]),
        bed="%s/MPILEUP/mpileup_reference/{samples}.bed" % (config["project-folder"])
    log:
        "%s/logs/Samtools/SortedBamToMpileup.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/Samtools/RefGenome_SortedBamToMpileup.{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        pipe=config["pipeline-folder"]
    singularity: config["singularity"]["samtools"]
    threads: cluster["SortedBamToMpileup"]["cpus-per-task"]
    resources:
        time=cluster["SortedBamToMpileup"]["time"],
        mem=cluster["SortedBamToMpileup"]["mem-per-cpu"]
    group: "star_alignments"
    shell:"""
        samtools mpileup -d 100 -B -C 50 -f {input.reference} {input.bam} > {output.mpileup}
        {params.pipe}/scripts/uniqueMpileup.sh {output.mpileup} > {output.unique}
        {params.pipe}/scripts/mpileupToBed.sh {output.unique} 10 > {output.bed} 2> {log}
    """

rule getJoinedLoci:
    """
    Merge the Loci
    """
    input:
        bed=expand("%s/MPILEUP/mpileup_reference/{samples}.bed" % (config["project-folder"]), samples=samples)
    output:
        merged="%s/MPILEUP/mpileup_reference/merged.bed" % (config["project-folder"]),
        joined="%s/MPILEUP/mpileup_reference/joinedLoci.bed" % (config["project-folder"])
    params:
        pipe=config["pipeline-folder"],
        cover=config["params"]["novel"]["minCover"]
    singularity: config["singularity"]["bedtools"]
    group: "Novel_mirna"
    threads: cluster["__default__"]["cpus-per-task"]
    resources:
        time=cluster["__default__"]["time"],
        mem=cluster["__default__"]["mem-per-cpu"]
    shell:"""
         multiIntersectBed -i {input} > {output.merged}
         {params.pipe}/scripts/getJoinedLoci.sh {output.merged} {params.cover} | bedtools sort | bedtools merge | awk "{{if(\$3-\$2 > 15) print}}" > {output.joined}
    """


rule intersectWithAnnotation:
    """
    Remove annotated regions from novel prediction loci
    """
    input:
        joined="%s/MPILEUP/mpileup_reference/joinedLoci.bed" % (config["project-folder"]),
        annot=config["refAnnot"],
        fa=config["reference"]
    output:
        merged="%s/Reference/novelLoci.bed" % (config["project-folder"]),
        fa="%s/Reference/novelLoci.fa" % (config["project-folder"]),
        tmp=temp("%s/Reference/novelLoci_unfiltered.bed" % (config["project-folder"]))
    log:
        "%s/logs/Bedtools/IntersectWithAnnotation.log" % (config["project-folder"])
    singularity: config["singularity"]["bedtools"]
    group: "Novel_mirna"
    threads: cluster["__default__"]["cpus-per-task"]
    resources:
        time=cluster["__default__"]["time"],
        mem=cluster["__default__"]["mem-per-cpu"]
    params:
        pipe=config["pipeline-folder"]
    shell:"""
        bedtools intersect -v -a {input.joined} -b {input.annot} > {output.tmp} 2>>{log}
        {params.pipe}/scripts/filterNovelMirna.sh {output.tmp} 16 > {output.merged} 2>>{log}
        bedtools getfasta -fi {input.fa} -bed {output.merged} > {output.fa} 2>>{log}
    """

