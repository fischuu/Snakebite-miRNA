rule seqkit_quantify_mature_BOWTIE:
    """
    Quantify the BOWTIE aligned reads to mature.fa (seqkit).
    """
    input:
        bam="%s/BAM/BOWTIE/Mature/{samples}_mature.bam" % (config["project-folder"]),
        bai="%s/BAM/BOWTIE/Mature/{samples}_mature.bam.bai" % (config["project-folder"])
    output:
        "%s/QUANTIFICATION/BOWTIE/Mature/{samples}_bowtie_mature_seqkit.txt" % (config["project-folder"])
    log:
        "%s/logs/SEQKIT/seqkit_bowtie_maturefa.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/seqkit/seqkit_bowtie_maturefa.{samples}.benchmark.tsv" % (config["project-folder"])
    threads: cluster["seqkit_quantify_mature_BOWTIE"]["cpus-per-task"]
    resources:
        time=cluster["seqkit_quantify_mature_BOWTIE"]["time"],
        mem=cluster["seqkit_quantify_mature_BOWTIE"]["mem-per-cpu"]
    singularity: config["singularity"]["seqkit"]
    shell:"""
    # This is needed, as the desired output is in stderr, but when I capture that in a file, I get a non-zero exit error
        seqkit bam -C {input.bam} 2> {log} && cat {log} > {output}
    """
    
rule seqkit_quantify_mature_species_BOWTIE:
    """
    Quantify the BOWTIE aligned reads to mature_species.fa (seqkit).
    """
    input:
        bam="%s/BAM/BOWTIE/Mature_Species/{samples}_mature_species.bam" % (config["project-folder"]),
        bai="%s/BAM/BOWTIE/Mature_Species/{samples}_mature_species.bam.bai" % (config["project-folder"])
    output:
        "%s/QUANTIFICATION/BOWTIE/Mature_Species/{samples}_bowtie_mature_species_seqkit.txt" % (config["project-folder"])
    log:
        "%s/logs/SEQKIT/seqkit_bowtie_maturespeciesfa.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/seqkit/seqkit_bowtie_maturespeciesfa.{samples}.benchmark.tsv" % (config["project-folder"])
    threads: cluster["seqkit_quantify_maturefa_BOWTIE"]["cpus-per-task"]
    resources:
        time=cluster["seqkit_quantify_maturefa_BOWTIE"]["time"],
        mem=cluster["seqkit_quantify_maturefa_BOWTIE"]["mem-per-cpu"]
    singularity: config["singularity"]["seqkit"]
    shell:"""
        # This is needed, as the desired output is in stderr, but when I capture that in a file, I get a non-zero exit error
        seqkit bam -C {input.bam} 2> {log} && cat {log} > {output}
    """
    
rule seqkit_quantify_hairpin_BOWTIE:
    """
    Quantify the BOWTIE aligned reads to mature_species.fa (seqkit).
    """
    input:
        bam="%s/BAM/BOWTIE/Hairpin/{samples}_hairpin.bam" % (config["project-folder"]),
        bai="%s/BAM/BOWTIE/Hairpin/{samples}_hairpin.bam.bai" % (config["project-folder"])
    output:
        "%s/QUANTIFICATION/BOWTIE/Hairpin/{samples}_bowtie_hairpin_seqkit.txt" % (config["project-folder"])
    log:
        "%s/logs/SEQKIT/seqkit_bowtie_hairpin.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/seqkit/seqkit_bowtie_hairpin.{samples}.benchmark.tsv" % (config["project-folder"])
    threads: cluster["seqkit_quantify_maturefa_BOWTIE"]["cpus-per-task"]
    resources:
        time=cluster["seqkit_quantify_maturefa_BOWTIE"]["time"],
        mem=cluster["seqkit_quantify_maturefa_BOWTIE"]["mem-per-cpu"]
    singularity: config["singularity"]["seqkit"]
    shell:"""
        # This is needed, as the desired output is in stderr, but when I capture that in a file, I get a non-zero exit error
        seqkit bam -C {input.bam} 2> {log} && cat {log} > {output}
    """

rule featureCounts_quantify_reference_BOWTIE:
    """
    Quantify the BOWTIE aligned reads to reference (featureCounts).
    """
    input:
        bam="%s/BAM/BOWTIE/Reference/{samples}_reference.bam" % (config["project-folder"])
    output:
        file="%s/QUANTIFICATION/BOWTIE/Reference/{samples}_bowtie_reference_fc.txt" % (config["project-folder"])
    log:
        "%s/logs/FC/featureCounts_bowtie_reference.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/FC/featureCounts_bowtie_reference.{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        annot=config["refAnnot"],
        tmpdir=config["scratch-folder"],
        gOption=config["params"]["featureCounts"]["gOption"],
        tOption=config["params"]["featureCounts"]["tOption"]
    threads: cluster["featureCounts_quantify_reference_BOWTIE"]["cpus-per-task"]
    resources:
        time=cluster["featureCounts_quantify_reference_BOWTIE"]["time"],
        mem=cluster["featureCounts_quantify_reference_BOWTIE"]["mem-per-cpu"]
    singularity: config["singularity"]["subread"]
    shell:"""
        featureCounts --primary -M \
                      -T {threads} \
                      -a {params.annot} \
                      -t {params.tOption} \
                      -g {params.gOption} \
                      -o {output.file} \
                      {input.bam} 2> {log}
    """

rule featureCounts_quantify_reference_STAR:
    """
    Quantify the STAR aligned reads to reference (featureCounts).
    """
    input:
        bam="%s/BAM/STAR/Reference/{samples}_reference_star.bam" % (config["project-folder"])
    output:
        file="%s/QUANTIFICATION/STAR/Reference/{samples}_star_reference_fc.txt" % (config["project-folder"]),
        exon="%s/QUANTIFICATION/STAR/Reference/{samples}_star_reference_exon_fc.txt" % (config["project-folder"])
    log:
        "%s/logs/FC/featureCounts_star_reference.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/FC/featureCounts_star_reference.{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        annot=config["refAnnot"],
        tmpdir=config["scratch-folder"],
        gOption=config["params"]["featureCounts"]["gOption"],
        tOption=config["params"]["featureCounts"]["tOption"],
        tOption2=config["params"]["featureCounts"]["tOption2"]
    threads: cluster["featureCounts_quantify_reference_STAR"]["cpus-per-task"]
    resources:
        time=cluster["featureCounts_quantify_reference_STAR"]["time"],
        mem=cluster["featureCounts_quantify_reference_STAR"]["mem-per-cpu"]
    singularity: config["singularity"]["subread"]
    shell:"""
        featureCounts --primary -M \
                      -T {threads} \
                      -a {params.annot} \
                      -t {params.tOption} \
                      -g {params.gOption} \
                      -o {output.file} \
                      {input.bam} 2> {log}

        featureCounts --primary -M \
                      -T {threads} \
                      -a {params.annot} \
                      -t {params.tOption2} \
                      -g {params.gOption} \
                      -o {output.exon} \
                      {input.bam} 2> {log}

    """
    
rule bash_quantify_mirbase_STAR:
    """
    Quantify the STAR primary alignments to mirbase (samtools).
    """
    input:
        mature="%s/BAM/STAR/Mature/{samples}_mature_star.bam" % (config["project-folder"]),
        maturespecies="%s/BAM/STAR/Mature_Species/{samples}_mature_species_star.bam" % (config["project-folder"]),
        hairpin="%s/BAM/STAR/Hairpin/{samples}_hairpin_star.bam" % (config["project-folder"]),
        hairpinspecies="%s/BAM/STAR/Hairpin_Species/{samples}_hairpin_species_star.bam" % (config["project-folder"])
    output:
        mature="%s/QUANTIFICATION/STAR/Mirbase/{samples}_star_mature.txt" % (config["project-folder"]),
        maturespecies="%s/QUANTIFICATION/STAR/Mirbase/{samples}_star_mature_species.txt" % (config["project-folder"]),
        hairpin="%s/QUANTIFICATION/STAR/Mirbase/{samples}_star_hairpin.txt" % (config["project-folder"]),
        hairpinspecies="%s/QUANTIFICATION/STAR/Mirbase/{samples}_star_hairpin_species.txt" % (config["project-folder"])
    log:
        "%s/logs/samtools/samtools_quantify_star_mirbase.{samples}.log" % (config["project-folder"])
    params: tmpdir=config["scratch-folder"]
    threads: cluster["featureCounts_quantify_reference_STAR"]["cpus-per-task"]
    resources:
        time=cluster["featureCounts_quantify_reference_STAR"]["time"],
        mem=cluster["featureCounts_quantify_reference_STAR"]["mem-per-cpu"]
    singularity: config["singularity"]["samtools"]
    shell:"""
        mkdir -p $TMPDIR >> {log} 2>&1
        
        samtools view -F 256 {input.mature} | cut -f3 | sort | uniq -c > {output.mature} 
        samtools view -F 256 {input.maturespecies} | cut -f3 | sort | uniq -c > {output.maturespecies}
        samtools view -F 256 {input.hairpin} | cut -f3 | sort | uniq -c > {output.hairpin}
        samtools view -F 256 {input.hairpinspecies} | cut -f3 | sort | uniq -c > {output.hairpinspecies}
    """

rule bedtools_quantify_novelMirna:
    """
    Quantify the STAR aligned reads to reference for novelMirna (bedtools).
    """
    input:
        bam="%s/BAM/STAR/Reference/{samples}_reference_star_primary.bam" % (config["project-folder"]),
        bed="%s/Reference/novelLoci.bed" % (config["project-folder"])
    output:
        "%s/QUANTIFICATION/STAR/Novel_genes/{samples}_star_novelMirna_bedtools.txt" % (config["project-folder"])
    log:
        "%s/logs/Bedtools/bedtools_star_novelMirna.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/Bedtools/bedtools_star_novelMirna.{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        annot=config["refAnnot"]
    params: tmpdir=config["scratch-folder"]
    threads: cluster["featureCounts_quantify_reference_STAR"]["cpus-per-task"]
    resources:
        time=cluster["featureCounts_quantify_reference_STAR"]["time"],
        mem=cluster["featureCounts_quantify_reference_STAR"]["mem-per-cpu"]
    singularity: config["singularity"]["bedtools"]
    shell:"""
        bedtools multicov -bams {input.bam} -bed {input.bed} > {output}        
    """
