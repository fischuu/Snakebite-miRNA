rule bowtie_map_clear_reads_mature:
    """
    Map non-tRNA and non-phiX samples against the mature.fa reference (bowtie).
    """
    input:
        reads="%s/FASTQ/PhiX/unmapped/{samples}_PhiX_unmapped.fastq" % (config["project-folder"]),
        index="%s/References/mature_basesAdjusted.fa.1.ebwt" % (config["project-folder"])
    output:
        mappedReads="%s/FASTQ/Mature/mapped/{samples}_mature_mapped.fastq" % (config["project-folder"]),
        unmappedReads="%s/FASTQ/Mature/unmapped/{samples}_mature_unmapped.fastq" % (config["project-folder"]),
        file="%s/BAM/BOWTIE/Mature/{samples}_mature.bam" % (config["project-folder"]),
        wclmapped="%s/FASTQ/Mature/mapped/{samples}_mature_mapped.wcl" % (config["project-folder"]),
        wclunmapped="%s/FASTQ/Mature/unmapped/{samples}_mature_unmapped.wcl" % (config["project-folder"]),
        wccmapped="%s/FASTQ/Mature/mapped/{samples}_mature_mapped.wcc" % (config["project-folder"]),
        wccunmapped="%s/FASTQ/Mature/unmapped/{samples}_mature_unmapped.wcc" % (config["project-folder"])
    params:
        bamFolder="%s/BAM/BOWTIE/Mature" % (config["project-folder"]),
        fastqFolder="%s/FASTQ/Mature" % (config["project-folder"]),
        index=config["matureIndex"],
        m=config["params"]["bowtie"]["m"],
        k=config["params"]["bowtie"]["k"]
    log:
        "%s/logs/BOWTIE/bowtie_map_mature.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/BOWTIE/bowtie_map_mature.{samples}.benchmark.tsv" % (config["project-folder"])
    threads: cluster["bowtie_map_clear_reads_mature"]["cpus-per-task"]
    resources:
        time=cluster["bowtie_map_clear_reads_mature"]["time"],
        mem=cluster["bowtie_map_clear_reads_mature"]["mem-per-cpu"]
    singularity: config["singularity"]["bowtie"]
    shell:"""
        mkdir -p {params.bamFolder}
        mkdir -p {params.fastqFolder}

        bowtie --best --strata --threads {threads} -k 50 -a -e 99999 --sam --al {output.mappedReads} --un {output.unmappedReads} {params.index} {input.reads}  | samtools view -bS | samtools sort - > {output.file} 2> {log};

        # I need to do this in case that there is a 0.00% alignment rate. In that case no files are created...
        touch {output.mappedReads}
        touch {output.unmappedReads}
        touch {output.file}
        
        wc -l {output.mappedReads} > {output.wclmapped}
        wc -l {output.unmappedReads} > {output.wclunmapped}
        sed -n '2~4p' {output.mappedReads}| wc -c > {output.wccmapped}
        sed -n '2~4p' {output.unmappedReads}| wc -c  > {output.wccunmapped}
    """

rule samtools_clear_reads_mature_flagstats:
    """
    Get mapping stats (samtools).
    """
    input:
        "%s/BAM/BOWTIE/Mature/{samples}_mature.bam" % (config["project-folder"])
    output:
        flagstat="%s/STATS/BOWTIE/Mature/{samples}_mature.flagstat" % (config["project-folder"]),
        stats="%s/STATS/BOWTIE/Mature/{samples}_mature.stats" % (config["project-folder"]),
        bai="%s/BAM/BOWTIE/Mature/{samples}_mature.bam.bai" % (config["project-folder"])
    threads: cluster["samtools_clear_reads_mature_flagstats"]["cpus-per-task"]
    resources:
        time=cluster["samtools_clear_reads_mature_flagstats"]["time"],
        mem=cluster["samtools_clear_reads_mature_flagstats"]["mem-per-cpu"]
    singularity: config["singularity"]["samtools"]
    shell:"""
        samtools flagstat {input} > {output.flagstat};
        samtools stats {input} > {output.stats};
        samtools index {input}
    """
    
rule bowtie_map_clear_reads_mature_species:
    """
    Map non-tRNA and non-phiX samples against the mature_species.fa reference (bowtie).
    """
    input:
        reads="%s/FASTQ/PhiX/unmapped/{samples}_PhiX_unmapped.fastq" % (config["project-folder"]),
        index="%s/References/mature_basesAdjusted_species.fa.1.ebwt" % (config["project-folder"])
    output:
        mappedReads="%s/FASTQ/Mature_Species/mapped/{samples}_mature_species_mapped.fastq" % (config["project-folder"]),
        unmappedReads="%s/FASTQ/Mature_Species/unmapped/{samples}_mature_species_unmapped.fastq" % (config["project-folder"]),
        file="%s/BAM/BOWTIE/Mature_Species/{samples}_mature_species.bam" % (config["project-folder"]),
        wclmapped="%s/FASTQ/Mature_Species/mapped/{samples}_mature_species_mapped.wcl" % (config["project-folder"]),
        wclunmapped="%s/FASTQ/Mature_Species/unmapped/{samples}_mature_species_unmapped.wcl" % (config["project-folder"]),
        wccmapped="%s/FASTQ/Mature_Species/mapped/{samples}_mature_species_mapped.wcc" % (config["project-folder"]),
        wccunmapped="%s/FASTQ/Mature_Species/unmapped/{samples}_mature_species_unmapped.wcc" % (config["project-folder"])
    params:
        bamFolder="%s/BAM/BOWTIE/Mature_Species" % (config["project-folder"]),
        fastqFolder="%s/FASTQ/Mature_Species" % (config["project-folder"]),
        index=config["matureSpeciesIndex"],
        m=config["params"]["bowtie"]["m"],
        k=config["params"]["bowtie"]["k"]
    log:
        "%s/logs/BOWTIE/bowtie_map_mature_species.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/BOWTIE/bowtie_map_mature_species.{samples}.benchmark.tsv" % (config["project-folder"])
    threads: cluster["bowtie_map_clear_reads_mature"]["cpus-per-task"]
    resources:
        time=cluster["bowtie_map_clear_reads_mature"]["time"],
        mem=cluster["bowtie_map_clear_reads_mature"]["mem-per-cpu"]
    singularity: config["singularity"]["bowtie"]
    shell:"""
        mkdir -p {params.bamFolder}
        mkdir -p {params.fastqFolder}

        bowtie --best --strata --threads {threads} -k 50 -a -e 99999 --sam --al {output.mappedReads} --un {output.unmappedReads} {params.index} {input.reads}  | samtools view -bS | samtools sort - > {output.file} 2> {log};

        # I need to do this in case that there is a 0.00% alignment rate. In that case no files are created...
        touch {output.mappedReads}
        touch {output.unmappedReads}
        touch {output.file}
        
        wc -l {output.mappedReads} > {output.wclmapped}
        wc -l {output.unmappedReads} > {output.wclunmapped}
        sed -n '2~4p' {output.mappedReads}| wc -c > {output.wccmapped}
        sed -n '2~4p' {output.unmappedReads}| wc -c  > {output.wccunmapped}
    """

rule samtools_clear_reads_mature_species_flagstats:
    """
    Get mapping stats (samtools).
    """
    input:
        "%s/BAM/BOWTIE/Mature_Species/{samples}_mature_species.bam" % (config["project-folder"])
    output:
        flagstat="%s/STATS/BOWTIE/Mature_Species/{samples}_mature_species.flagstat" % (config["project-folder"]),
        stats="%s/STATS/BOWTIE/Mature_Species/{samples}_mature_species.stats" % (config["project-folder"]),
        bai="%s/BAM/BOWTIE/Mature_Species/{samples}_mature_species.bam.bai" % (config["project-folder"])
    threads: cluster["__default__"]["cpus-per-task"]
    resources:
        time=cluster["__default__"]["time"],
        mem=cluster["__default__"]["mem-per-cpu"]
    singularity: config["singularity"]["samtools"]
    shell:"""
        samtools flagstat {input} > {output.flagstat};
        samtools stats {input} > {output.stats};
        samtools index {input}
    """

rule bowtie_map_nonmature_reads_hairpin:
    """
    Map non-tRNA, non-phiX and non-mature samples against the hairpin.fa reference (bowtie).
    """
    input:
        reads="%s/FASTQ/Mature/unmapped/{samples}_mature_unmapped.fastq" % (config["project-folder"]),
        index="%s/References/hairpin_basesAdjusted.fa.1.ebwt" % (config["project-folder"])
    output:
        mappedReads="%s/FASTQ/Hairpin/mapped/{samples}_hairpin_mapped.fastq" % (config["project-folder"]),
        unmappedReads="%s/FASTQ/Hairpin/unmapped/{samples}_hairpin_unmapped.fastq" % (config["project-folder"]),
        file="%s/BAM/BOWTIE/Hairpin/{samples}_hairpin.bam" % (config["project-folder"]),
        wclmapped="%s/FASTQ/Hairpin/mapped/{samples}_hairpin_mapped.wcl" % (config["project-folder"]),
        wclunmapped="%s/FASTQ/Hairpin/unmapped/{samples}_hairpin_unmapped.wcl" % (config["project-folder"]),
        wccmapped="%s/FASTQ/Hairpin/mapped/{samples}_hairpin_mapped.wcc" % (config["project-folder"]),
        wccunmapped="%s/FASTQ/Hairpin/unmapped/{samples}_hairpin_unmapped.wcc" % (config["project-folder"])
    params:
        bamFolder="%s/BAM/BOWTIE/Hairpin" % (config["project-folder"]),
        fastqFolder="%s/FASTQ/Hairpin" % (config["project-folder"]),
        index=config["hairpinIndex"],
        m=config["params"]["bowtie"]["m"],
        k=config["params"]["bowtie"]["k"]
    log:
        "%s/logs/BOWTIE/bowtie_map_hairpin.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/BOWTIE/bowtie_map_hairpin.{samples}.benchmark.tsv" % (config["project-folder"])
    threads: cluster["bowtie_map_nonmature_reads_hairpin"]["cpus-per-task"]
    resources:
        time=cluster["bowtie_map_nonmature_reads_hairpin"]["time"],
        mem=cluster["bowtie_map_nonmature_reads_hairpin"]["mem-per-cpu"]
    singularity: config["singularity"]["bowtie"]
    shell:"""
        mkdir -p {params.bamFolder}
        mkdir -p {params.fastqFolder}

        bowtie --best --strata --threads {threads} -k 50 -a -e 99999 --sam --al {output.mappedReads} --un {output.unmappedReads} {params.index} {input.reads} | samtools view -bS | samtools sort - > {output.file} 2> {log};

        # I need to do this in case that there is a 0.00% alignment rate. In that case no files are created...
        touch {output.mappedReads}
        touch {output.unmappedReads}
        touch {output.file}
        
        wc -l {output.mappedReads} > {output.wclmapped}
        wc -l {output.unmappedReads} > {output.wclunmapped}
        sed -n '2~4p' {output.mappedReads}| wc -c > {output.wccmapped}
        sed -n '2~4p' {output.unmappedReads}| wc -c  > {output.wccunmapped}
    """

rule samtools_nonmature_reads_hairpin_flagstats:
    """
    Get mapping stats (samtools).
    """
    input:
        "%s/BAM/BOWTIE/Hairpin/{samples}_hairpin.bam" % (config["project-folder"])
    output:
        flagstat="%s/STATS/BOWTIE/Hairpin/{samples}_hairpin.flagstat" % (config["project-folder"]),
        stats="%s/STATS/BOWTIE/Hairpin/{samples}_hairpin.stats" % (config["project-folder"]),
        bai="%s/BAM/BOWTIE/Hairpin/{samples}_hairpin.bam.bai" % (config["project-folder"])
    threads: cluster["__default__"]["cpus-per-task"]
    resources:
        time=cluster["__default__"]["time"],
        mem=cluster["__default__"]["mem-per-cpu"]
    singularity: config["singularity"]["samtools"]
    shell:"""
        samtools flagstat {input} > {output.flagstat};
        samtools stats {input} > {output.stats};
        samtools index {input}
    """

rule bowtie_map_clear_reads_reference:
    """
    Map non-tRNA, non-phiX, non-maturefa and non-hairpin.fa samples against the reference genome (bowtie).
    """
    input:
        reads="%s/FASTQ/Hairpin/unmapped/{samples}_hairpin_unmapped.fastq" % (config["project-folder"]),
        index="%s.1.ebwt" % (config["reference"])
    output:
        mappedReads="%s/FASTQ/Reference/mapped/{samples}_reference_mapped.fastq" % (config["project-folder"]),
        unmappedReads="%s/FASTQ/Reference/unmapped/{samples}_reference_unmapped.fastq" % (config["project-folder"]),
        file="%s/BAM/BOWTIE/Reference/{samples}_reference.bam" % (config["project-folder"]),
        wclmapped="%s/FASTQ/Reference/mapped/{samples}_reference_mapped.wcl" % (config["project-folder"]),
        wclunmapped="%s/FASTQ/Reference/unmapped/{samples}_reference_unmapped.wcl" % (config["project-folder"]),
        wccmapped="%s/FASTQ/Reference/mapped/{samples}_reference_mapped.wcc" % (config["project-folder"]),
        wccunmapped="%s/FASTQ/Reference/unmapped/{samples}_reference_unmapped.wcc" % (config["project-folder"])
    params:
        bamFolder="%s/BAM/BOWTIE/Reference" % (config["project-folder"]),
        fastqFolder="%s/FASTQ/Reference" % (config["project-folder"]),
        index=config["referenceIndex"],
        m=config["params"]["bowtie"]["m"],
        k=config["params"]["bowtie"]["k"]
    log:
        "%s/logs/BOWTIE/bowtie_map_reference.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/BOWTIE/bowtie_map_reference.{samples}.benchmark.tsv" % (config["project-folder"])
    threads: cluster["bowtie_map_clear_reads_reference"]["cpus-per-task"]
    resources:
        time=cluster["bowtie_map_clear_reads_reference"]["time"],
        mem=cluster["bowtie_map_clear_reads_reference"]["mem-per-cpu"]
    singularity: config["singularity"]["bowtie"]
    shell:"""
        mkdir -p {params.bamFolder}
        mkdir -p {params.fastqFolder}

        bowtie --best --strata --threads {threads} -k 50 -a -e 99999 --sam --al {output.mappedReads} --un {output.unmappedReads} {params.index} {input.reads} | samtools view -bS | samtools sort - > {output.file} 2> {log};

        # I need to do this in case that there is a 0.00% alignment rate. In that case no files are created...
        touch {output.mappedReads}
        touch {output.unmappedReads}
        touch {output.file}
        
        wc -l {output.mappedReads} > {output.wclmapped}
        wc -l {output.unmappedReads} > {output.wclunmapped}
        sed -n '2~4p' {output.mappedReads}| wc -c > {output.wccmapped}
        sed -n '2~4p' {output.unmappedReads}| wc -c  > {output.wccunmapped}
    """

rule samtools_clear_reads_reference_flagstats:
    """
    Get mapping stats (samtools).
    """
    input:
        "%s/BAM/BOWTIE/Reference/{samples}_reference.bam" % (config["project-folder"])
    output:
        flagstat="%s/STATS/BOWTIE/Reference/{samples}_reference.flagstat" % (config["project-folder"]),
        stats="%s/STATS/BOWTIE/Reference/{samples}_reference.stats" % (config["project-folder"]),
    threads: cluster["__default__"]["cpus-per-task"]
    resources:
        time=cluster["__default__"]["time"],
        mem=cluster["__default__"]["mem-per-cpu"]
    singularity: config["singularity"]["samtools"]
    shell:"""
        samtools flagstat {input} > {output.flagstat};
        samtools stats {input} > {output.stats};
        samtools index {input}
    """

rule star_map_clear_reads_mature:
    """
    Map non-tRNA and non-phiX samples against the mature.fa (STAR).
    """
    input:
        "%s/chrName.txt" % (config["matureSTARIndex"]),
        fastq="%s/FASTQ/PhiX/unmapped/{samples}_PhiX_unmapped.fastq" % (config["project-folder"])
    output:
        file="%s/BAM/STAR/Mature/{samples}_mature_star.bam" % (config["project-folder"]),
        dir=directory("%s/BAM/STAR/Mature/{samples}" % (config["project-folder"]))
    log:
        "%s/logs/STAR/star_mature.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/STAR/star_mature.{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        index=config["matureSTARIndex"],
        tmpdirTop="%s/STAR_tmp/Mature" % (config["project-folder"]),
        tmpdir="%s/STAR_tmp/Mature/{samples}" % (config["project-folder"]),
        limitBAMsortRAM=config["params"]["star"]["limitBAMsortRAM"]
    threads: cluster["star_map_clear_reads_mature"]["cpus-per-task"]
    resources:
        time=cluster["star_map_clear_reads_mature"]["time"],
        mem=cluster["star_map_clear_reads_mature"]["mem-per-cpu"]
    singularity: config["singularity"]["star"]
    shell:"""
        mkdir -p {output.dir};
        mkdir -p {params.tmpdirTop};

        printf \"%s\t%s\t%s\t%s\t%s\n\" {params.index} {input.fastq} {output} {log} {threads}
      	[ ! -d \"{output.dir}\" ] && mkdir {output.dir}
        
        cd {params.tmpdirTop}
        
        STAR --genomeDir {params.index} \
            --outTmpDir {params.tmpdir} \
            --readFilesIn {input.fastq} \
            --outFilterMismatchNoverLmax 0.01 \
            --outFilterMatchNmin 16 \
            --outFilterScoreMinOverLread 0  \
            --outFilterMatchNminOverLread 0 \
            --outFilterMultimapNmax 50 \
            --chimSegmentMin 20 \
            --chimOutType WithinBAM \
            --alignIntronMax 1 \
            --outSAMtype BAM SortedByCoordinate \
            --outSAMunmapped Within \
            --outMultimapperOrder Random \
            --runThreadN {threads} \
            --limitBAMsortRAM {params.limitBAMsortRAM} \
            --outFileNamePrefix {wildcards.samples}_ 2> {log};
            
        cd {params.tmpdirTop};
            
        mv {wildcards.samples}_Aligned.sortedByCoord.out.bam {output.file}
        mv {wildcards.samples}_Log.final.out {wildcards.samples}_Log.progress.out {wildcards.samples}_Log.out {wildcards.samples}_SJ.out.tab {output.dir}
    """

rule samtools_star_reads_mature_flagstats:
    """
    Get mapping stats (samtools).
    """
    input:
        "%s/BAM/STAR/Mature/{samples}_mature_star.bam" % (config["project-folder"])
    output:
        flagstat="%s/STATS/STAR/Mature/{samples}_mature.flagstat" % (config["project-folder"]),
        stats="%s/STATS/STAR/Mature/{samples}_mature.stats" % (config["project-folder"]),
        fastqMapped="%s/FASTQ/Mature/mapped_star/{samples}_mature_mapped_star.fastq" % (config["project-folder"]),
        fastqUnmapped="%s/FASTQ/Mature/unmapped_star/{samples}_mature_unmapped_star.fastq" % (config["project-folder"])
    log:
        "%s/logs/samtools/samtools_star_mature.{samples}.log" % (config["project-folder"])
    threads: cluster["samtools_star_reads_mature_flagstats"]["cpus-per-task"]
    resources:
        time=cluster["samtools_star_reads_mature_flagstats"]["time"],
        mem=cluster["samtools_star_reads_mature_flagstats"]["mem-per-cpu"]
    singularity: config["singularity"]["samtools"]
    shell:"""
        samtools flagstat {input} > {output.flagstat} 2> {log}
        samtools stats {input} > {output.stats} 2> {log}
        samtools index {input}
        
        samtools bam2fq -F 4 {input} > {output.fastqMapped} 2> {log}
        samtools bam2fq -f 4 {input} > {output.fastqUnmapped} 2> {log}
        touch {output.fastqMapped}
        touch {output.fastqUnmapped}
    """

rule star_map_clear_reads_mature_species:
    """
    Map non-tRNA and non-phiX samples against the mature_basedAdjusted_species.fa (STAR).
    """
    input:
        "%s/chrName.txt" % (config["matureSpeciesSTARIndex"]),
        fastq="%s/FASTQ/PhiX/unmapped/{samples}_PhiX_unmapped.fastq" % (config["project-folder"])
    output:
        file="%s/BAM/STAR/Mature_Species/{samples}_mature_species_star.bam" % (config["project-folder"]),
        dir=directory("%s/BAM/STAR/Mature_Species/{samples}" % (config["project-folder"]))
    log:
        "%s/logs/STAR/star_mature_species.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/STAR/star_mature_species.{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        index=config["matureSpeciesSTARIndex"],
        tmpdirTop="%s/STAR_tmp/Mature_Species" % (config["project-folder"]),
        tmpdir="%s/STAR_tmp/Mature_Species/{samples}" % (config["project-folder"]),
        limitBAMsortRAM=config["params"]["star"]["limitBAMsortRAM"]
    threads: cluster["star_map_clear_reads_mature"]["cpus-per-task"]
    resources:
        time=cluster["star_map_clear_reads_mature"]["time"],
        mem=cluster["star_map_clear_reads_mature"]["mem-per-cpu"]
    singularity: config["singularity"]["star"]
    shell:"""
        mkdir -p {output.dir};
        mkdir -p {params.tmpdirTop};

        printf \"%s\t%s\t%s\t%s\t%s\n\" {params.index} {input.fastq} {output} {log} {threads}
      	[ ! -d \"{output.dir}\" ] && mkdir {output.dir}
        
        cd {params.tmpdirTop}
        
        STAR --genomeDir {params.index} \
            --outTmpDir {params.tmpdir} \
            --readFilesIn {input.fastq} \
            --outFilterMismatchNoverLmax 0.05 \
            --outFilterMatchNmin 16 \
            --outFilterScoreMinOverLread 0  \
            --outFilterMatchNminOverLread 0 \
            --outFilterMultimapNmax 50 \
            --chimSegmentMin 20 \
            --chimOutType WithinBAM \
            --alignIntronMax 1 \
            --outSAMtype BAM SortedByCoordinate \
            --outSAMunmapped Within \
            --outMultimapperOrder Random \
            --runThreadN {threads} \
            --limitBAMsortRAM {params.limitBAMsortRAM} \
            --outFileNamePrefix {wildcards.samples}_ 2> {log};
            
        cd {params.tmpdirTop};
            
        mv {wildcards.samples}_Aligned.sortedByCoord.out.bam {output.file}
        mv {wildcards.samples}_Log.final.out {wildcards.samples}_Log.progress.out {wildcards.samples}_Log.out {wildcards.samples}_SJ.out.tab {output.dir}
    """

rule samtools_star_reads_mature_species_flagstats:
    """
    Get mapping stats (samtools).
    """
    input:
        "%s/BAM/STAR/Mature_Species/{samples}_mature_species_star.bam" % (config["project-folder"])
    output:
        flagstat="%s/STATS/STAR/Mature_Species/{samples}_mature_species.flagstat" % (config["project-folder"]),
        stats="%s/STATS/STAR/Mature_Species/{samples}_mature_species.stats" % (config["project-folder"]),
        fastqMapped="%s/FASTQ/Mature_Species/mapped_star/{samples}_mature_species_mapped_star.fastq" % (config["project-folder"]),
        fastqUnmapped="%s/FASTQ/Mature_Species/unmapped_star/{samples}_mature_species_unmapped_star.fastq" % (config["project-folder"])
    log:
        "%s/logs/samtools/samtools_star_mature_species.{samples}.log" % (config["project-folder"])
    threads: cluster["samtools_star_reads_mature_species_flagstats"]["cpus-per-task"]
    resources:
        time=cluster["samtools_star_reads_mature_species_flagstats"]["time"],
        mem=cluster["samtools_star_reads_mature_species_flagstats"]["mem-per-cpu"]
    singularity: config["singularity"]["samtools"]
    shell:"""
        samtools flagstat {input} > {output.flagstat} 2> {log}
        samtools stats {input} > {output.stats} 2> {log}
        samtools index {input}
        
        samtools bam2fq -F 4 {input} > {output.fastqMapped} 2> {log}
        samtools bam2fq -f 4 {input} > {output.fastqUnmapped} 2> {log}
        touch {output.fastqMapped}
        touch {output.fastqUnmapped}
    """

rule star_map_clear_reads_hairpin:
    """
    Map non-tRNA, non-phiX and non-maturefa samples against the hairpin.fa (STAR).
    """
    input:
        "%s/chrName.txt" % (config["hairpinSTARIndex"]),
        fastq="%s/FASTQ/PhiX/unmapped/{samples}_PhiX_unmapped.fastq" % (config["project-folder"])
    output:
        file="%s/BAM/STAR/Hairpin/{samples}_hairpin_star.bam" % (config["project-folder"]),
        dir=directory("%s/BAM/STAR/Hairpin/{samples}" % (config["project-folder"]))
    log:
        "%s/logs/STAR/star_hairpin.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/STAR/star_hairpin.{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        index=config["hairpinSTARIndex"],
        tmpdirTop="%s/STAR_tmp/Hairpin" % (config["project-folder"]),
        tmpdir="%s/STAR_tmp/Hairpin/{samples}" % (config["project-folder"]),
        limitBAMsortRAM=config["params"]["star"]["limitBAMsortRAM"]
    threads: cluster["star_map_clear_reads_hairpin"]["cpus-per-task"]
    resources:
        time=cluster["star_map_clear_reads_hairpin"]["time"],
        mem=cluster["star_map_clear_reads_hairpin"]["mem-per-cpu"]
    singularity: config["singularity"]["star"]
    shell:"""
        mkdir -p {output.dir};
        mkdir -p {params.tmpdirTop};

        printf \"%s\t%s\t%s\t%s\t%s\n\" {params.index} {input.fastq} {output} {log} {threads}
      	[ ! -d \"{output.dir}\" ] && mkdir {output.dir}
        
        cd {params.tmpdirTop}
        
        STAR --genomeDir {params.index} \
            --outTmpDir {params.tmpdir} \
            --readFilesIn {input.fastq} \
            --outFilterMismatchNoverLmax 0.05 \
            --outFilterMatchNmin 16 \
            --outFilterScoreMinOverLread 0  \
            --outFilterMatchNminOverLread 0 \
            --outFilterMultimapNmax 50 \
            --chimSegmentMin 20 \
            --chimOutType WithinBAM \
            --alignIntronMax 1 \
            --outSAMtype BAM SortedByCoordinate \
            --outSAMunmapped Within \
            --outMultimapperOrder Random \
            --runThreadN {threads} \
            --limitBAMsortRAM {params.limitBAMsortRAM} \
            --outFileNamePrefix {wildcards.samples}_ 2> {log};
            
        cd {params.tmpdirTop};
            
        mv {wildcards.samples}_Aligned.sortedByCoord.out.bam {output.file}
        mv {wildcards.samples}_Log.final.out {wildcards.samples}_Log.progress.out {wildcards.samples}_Log.out {wildcards.samples}_SJ.out.tab {output.dir}
    """

rule samtools_star_reads_hairpin_flagstats:
    """
    Get mapping stats (samtools).
    """
    input:
        "%s/BAM/STAR/Hairpin/{samples}_hairpin_star.bam" % (config["project-folder"])
    output:
        flagstat="%s/STATS/STAR/Hairpin/{samples}_hairpin.flagstat" % (config["project-folder"]),
        stats="%s/STATS/STAR/Hairpin/{samples}_hairpin.stats" % (config["project-folder"]),
        fastqMapped="%s/FASTQ/Hairpin/mapped_star/{samples}_hairpin_mapped_star.fastq" % (config["project-folder"]),
        fastqUnmapped="%s/FASTQ/Hairpin/unmapped_star/{samples}_hairpin_unmapped_star.fastq" % (config["project-folder"])
    log:
        "%s/logs/samtools/samtools_star_hairpin.{samples}.log" % (config["project-folder"])
    threads: cluster["__default__"]["cpus-per-task"]
    resources:
        time=cluster["__default__"]["time"],
        mem=cluster["__default__"]["mem-per-cpu"]
    singularity: config["singularity"]["samtools"]
    shell:"""
        samtools flagstat {input} > {output.flagstat} 2> {log}
        samtools stats {input} > {output.stats} 2> {log}
        samtools index {input}
        
        samtools bam2fq -F 4 {input} > {output.fastqMapped} 2> {log}
        samtools bam2fq -f 4 {input} > {output.fastqUnmapped} 2> {log}
        touch {output.fastqMapped}
        touch {output.fastqUnmapped}
    """
    
rule star_map_clear_reads_hairpin_species:
    """
    Map non-tRNA, non-phiX and non-maturespeciesfa samples against the hairpinspecies.fa (STAR).
    """
    input:
        "%s/chrName.txt" % (config["hairpinSpeciesSTARIndex"]),
        fastq="%s/FASTQ/Mature_Species/unmapped_star/{samples}_mature_species_unmapped_star.fastq" % (config["project-folder"])
    output:
        file="%s/BAM/STAR/Hairpin_Species/{samples}_hairpin_species_star.bam" % (config["project-folder"]),
        dir=directory("%s/BAM/STAR/Hairpin_Species/{samples}" % (config["project-folder"]))
    log:
        "%s/logs/STAR/star_hairpin_species.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/STAR/star_hairpin_species.{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        index=config["hairpinSpeciesSTARIndex"],
        tmpdirTop="%s/STAR_tmp/HairpinSpecies" % (config["project-folder"]),
        tmpdir="%s/STAR_tmp/HairpinSpecies/{samples}" % (config["project-folder"]),
        limitBAMsortRAM=config["params"]["star"]["limitBAMsortRAM"]
    threads: cluster["star_map_clear_reads_hairpin"]["cpus-per-task"]
    resources:
        time=cluster["star_map_clear_reads_hairpin"]["time"],
        mem=cluster["star_map_clear_reads_hairpin"]["mem-per-cpu"]
    singularity: config["singularity"]["star"]
    shell:"""
        mkdir -p {output.dir};
        mkdir -p {params.tmpdirTop};

        printf \"%s\t%s\t%s\t%s\t%s\n\" {params.index} {input.fastq} {output} {log} {threads}
      	[ ! -d \"{output.dir}\" ] && mkdir {output.dir}
        
        cd {params.tmpdirTop}
        
        STAR --genomeDir {params.index} \
            --outTmpDir {params.tmpdir} \
            --readFilesIn {input.fastq} \
            --outFilterMismatchNoverLmax 0.05 \
            --outFilterMatchNmin 16 \
            --outFilterScoreMinOverLread 0  \
            --outFilterMatchNminOverLread 0 \
            --outFilterMultimapNmax 50 \
            --chimSegmentMin 20 \
            --chimOutType WithinBAM \
            --alignIntronMax 1 \
            --outSAMtype BAM SortedByCoordinate \
            --outSAMunmapped Within \
            --outMultimapperOrder Random \
            --runThreadN {threads} \
            --limitBAMsortRAM {params.limitBAMsortRAM} \
            --outFileNamePrefix {wildcards.samples}_ 2> {log};
            
        cd {params.tmpdirTop};
            
        mv {wildcards.samples}_Aligned.sortedByCoord.out.bam {output.file}
        mv {wildcards.samples}_Log.final.out {wildcards.samples}_Log.progress.out {wildcards.samples}_Log.out {wildcards.samples}_SJ.out.tab {output.dir}
    """

rule samtools_star_reads_hairpin_species_flagstats:
    """
    Get mapping stats (samtools).
    """
    input:
        "%s/BAM/STAR/Hairpin_Species/{samples}_hairpin_species_star.bam" % (config["project-folder"])
    output:
        flagstat="%s/STATS/STAR/Hairpin_Species/{samples}_hairpin_species.flagstat" % (config["project-folder"]),
        stats="%s/STATS/STAR/Hairpin_Species/{samples}_hairpin_species.stats" % (config["project-folder"]),
        fastqMapped="%s/FASTQ/Hairpin_Species/mapped_star/{samples}_hairpin_species_mapped_star.fastq" % (config["project-folder"]),
        fastqUnmapped="%s/FASTQ/Hairpin_Species/unmapped_star/{samples}_hairpin_species_unmapped_star.fastq" % (config["project-folder"])
    log:
        "%s/logs/samtools/samtools_star_hairpin_species.{samples}.log" % (config["project-folder"])
    threads: cluster["__default__"]["cpus-per-task"]
    resources:
        time=cluster["__default__"]["time"],
        mem=cluster["__default__"]["mem-per-cpu"]
    singularity: config["singularity"]["samtools"]
    shell:"""
        samtools flagstat {input} > {output.flagstat} 2> {log}
        samtools stats {input} > {output.stats} 2> {log}
        samtools index {input}
        
        samtools bam2fq -F 4 {input} > {output.fastqMapped} 2> {log}
        samtools bam2fq -f 4 {input} > {output.fastqUnmapped} 2> {log}
        touch {output.fastqMapped}
        touch {output.fastqUnmapped}
    """


rule star_map_unmapped_mirbase_reads_reference:
    """
    Map non-tRNA and non-phiX samples against the host reference (STAR).
    """
    input:
        "%s/chrName.txt" % (config["referenceSTARIndex"]),
        fastq="%s/FASTQ/Hairpin_Species/unmapped_star/{samples}_hairpin_species_unmapped_star.fastq" % (config["project-folder"])
    output:
        file="%s/BAM/STAR/Reference/{samples}_reference_star.bam" % (config["project-folder"]),
        dir=directory("%s/BAM/STAR/Reference/{samples}" % (config["project-folder"]))
    log:
        "%s/logs/STAR/star_reference.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/STAR/star_reference.{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        index=config["referenceSTARIndex"],
        tmpdirTop="%s/STAR_tmp/Reference" % (config["project-folder"]),
        tmpdir="%s/STAR_tmp/Reference/{samples}" % (config["project-folder"]),
        limitBAMsortRAM=config["params"]["star"]["limitBAMsortRAM"]
    threads: cluster["star_map_unmapped_mirbase_reads_reference"]["cpus-per-task"]
    resources:
        time=cluster["star_map_unmapped_mirbase_reads_reference"]["time"],
        mem=cluster["star_map_unmapped_mirbase_reads_reference"]["mem-per-cpu"]
    singularity: config["singularity"]["star"]
    shell:"""
        mkdir -p {output.dir};
        mkdir -p {params.tmpdirTop};

        printf \"%s\t%s\t%s\t%s\t%s\n\" {params.index} {input.fastq} {output} {log} {threads}
      	[ ! -d \"{output.dir}\" ] && mkdir {output.dir}
        
        cd {params.tmpdirTop} 
        
        STAR --genomeDir {params.index} \
            --outTmpDir {params.tmpdir} \
            --readFilesIn {input.fastq} \
            --outFilterMismatchNoverLmax 0.05 \
            --outFilterMatchNmin 16 \
            --outFilterScoreMinOverLread 0  \
            --outFilterMatchNminOverLread 0 \
            --outFilterMultimapNmax 50 \
            --chimSegmentMin 20 \
            --chimOutType WithinBAM \
            --alignIntronMax 1 \
            --outSAMtype BAM SortedByCoordinate \
            --outSAMunmapped Within \
            --outMultimapperOrder Random \
            --runThreadN {threads} \
            --limitBAMsortRAM {params.limitBAMsortRAM} \
            --outFileNamePrefix {wildcards.samples}_ 2> {log};
            
        cd {params.tmpdirTop};           
            
        mv {wildcards.samples}_Aligned.sortedByCoord.out.bam {output.file}
        mv {wildcards.samples}_Log.final.out {wildcards.samples}_Log.progress.out {wildcards.samples}_Log.out {wildcards.samples}_SJ.out.tab {output.dir}
    """

rule samtools_remove_secondary_alignments:
    """
    Remove secondary alignments (SAMTOOLS).
    """
    input:
        "%s/BAM/STAR/Reference/{samples}_reference_star.bam" % (config["project-folder"])
    output:
        "%s/BAM/STAR/Reference/{samples}_reference_star_primary.bam" % (config["project-folder"])
    log:
        "%s/logs/STAR/star_reference_primary.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/STAR/star_reference_primary.{samples}.benchmark.tsv" % (config["project-folder"])
    threads: cluster["star_map_clear_reads_reference"]["cpus-per-task"]
    resources:
        time=cluster["star_map_clear_reads_reference"]["time"],
        mem=cluster["star_map_clear_reads_reference"]["mem-per-cpu"]
    singularity: config["singularity"]["samtools"]
    shell:"""
        samtools view -bq 1 {input} > {output}
        samtools index {output}
    """

rule samtools_star_reads_reference_flagstats:
    """
    Get mapping stats (samtools).
    """
    input:
        "%s/BAM/STAR/Reference/{samples}_reference_star.bam" % (config["project-folder"])
    output:
        flagstat="%s/STATS/STAR/Reference/{samples}_reference.flagstat" % (config["project-folder"]),
        stats="%s/STATS/STAR/Reference/{samples}_reference.stats" % (config["project-folder"]),
        fastqMapped="%s/FASTQ/Reference/mapped_star/{samples}_reference_mapped_star.fastq" % (config["project-folder"]),
        fastqUnmapped="%s/FASTQ/Reference/unmapped_star/{samples}_reference_unmapped_star.fastq" % (config["project-folder"])
    log:
        "%s/logs/samtools/samtools_star_reference.{samples}.log" % (config["project-folder"])
    threads: cluster["samtools_star_reads_reference_flagstats"]["cpus-per-task"]
    resources:
        time=cluster["samtools_star_reads_reference_flagstats"]["time"],
        mem=cluster["samtools_star_reads_reference_flagstats"]["mem-per-cpu"]
    singularity: config["singularity"]["samtools"]
    shell:"""
        samtools flagstat {input} > {output.flagstat} 2> {log}
        samtools stats {input} > {output.stats} 2> {log}
        samtools index {input}
        
        samtools bam2fq -F 4 {input} > {output.fastqMapped} 2> {log}
        samtools bam2fq -f 4 {input} > {output.fastqUnmapped} 2> {log}
        touch {output.fastqMapped}
        touch {output.fastqUnmapped}
    """

rule bash_get_softclipped_fasta:
    """
    Extract the soft-clipped parts from the STAR alignments.
    """
    input:
        ref="%s/BAM/STAR/Reference/{samples}_reference_star.bam" % (config["project-folder"]),
        mature="%s/BAM/STAR/Mature/{samples}_mature_star.bam" % (config["project-folder"]),
        matureSpecies="%s/BAM/STAR/Mature_Species/{samples}_mature_species_star.bam" % (config["project-folder"])
    output:
        ref="%s/FASTA/STAR/Reference_softclipped/{samples}_reference_softclipped.fasta.gz" % (config["project-folder"]),
        mature="%s/FASTA/STAR/Mature_softclipped/{samples}_mature_softclipped.fasta.gz" % (config["project-folder"]),
        matureSpecies="%s/FASTA/STAR/MatureSpecies_softclipped/{samples}_mature_species_softclipped.fasta.gz" % (config["project-folder"])
    log:
        "%s/logs/bash_getSoftclipped.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/bash_getSoftclipped.{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        l=config["params"]["extractSoftClipped"]["length"],
        pipe=config["pipeline-folder"]
    threads: cluster["__default__"]["cpus-per-task"]
    resources:
        time=cluster["__default__"]["time"],
        mem=cluster["__default__"]["mem-per-cpu"]
    shell:"""
        {params.pipe}/scripts/extractSoftclipped -l {params.l} {input.ref} > {output.ref} 2> {log}
        {params.pipe}/scripts/extractSoftclipped -l {params.l} {input.mature} > {output.mature} 2> {log}
        {params.pipe}/scripts/extractSoftclipped -l {params.l} {input.matureSpecies} > {output.matureSpecies} 2> {log}
    """ 
